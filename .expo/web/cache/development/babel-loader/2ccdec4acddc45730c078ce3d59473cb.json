{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\tersa\\\\Documents\\\\Projetos\\\\fala-einstein\\\\App.js\";\nimport { Magnetometer } from 'expo-sensors';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nexport default function Compass() {\n  var _React$useState = React.useState({\n    x: 0,\n    y: 0,\n    z: 0\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      data = _React$useState2[0],\n      setData = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      subscription = _React$useState4[0],\n      setSubscription = _React$useState4[1];\n\n  React.useEffect(function () {\n    _toggle();\n\n    return function () {\n      _unsubscribe();\n    };\n  }, []);\n\n  var _toggle = function _toggle() {\n    if (subscription) {\n      _unsubscribe();\n    } else {\n      _subscribe();\n    }\n  };\n\n  var _slow = function _slow() {\n    Magnetometer.setUpdateInterval(1000);\n  };\n\n  var _fast = function _fast() {\n    Magnetometer.setUpdateInterval(16);\n  };\n\n  var _subscribe = function _subscribe() {\n    setSubscription(Magnetometer.addListener(function (result) {\n      setData(result);\n    }));\n  };\n\n  var _unsubscribe = function _unsubscribe() {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  var x = data.x,\n      y = data.y,\n      z = data.z;\n  return React.createElement(View, {\n    style: styles.sensor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    style: styles.Imagem,\n    source: require(\"./assets/Magneto.png\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 8\n    }\n  }), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }, \"Magnet\\xF4metro:\"), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, \"x: \", round(x), \" y: \", round(y), \" z: \", round(z)), React.createElement(View, {\n    style: styles.buttonContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, React.createElement(TouchableOpacity, {\n    onPress: _toggle,\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, \"Alternar\")), React.createElement(TouchableOpacity, {\n    onPress: _slow,\n    style: [styles.button, styles.middleButton],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, \"Devagar\")), React.createElement(TouchableOpacity, {\n    onPress: _fast,\n    style: styles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, \"R\\xE1pido\"))));\n}\n\nfunction round(n) {\n  if (!n) {\n    return 0;\n  }\n\n  return Math.floor(n * 100) / 100;\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc'\n  },\n  sensor: {\n    marginTop: 15,\n    paddingHorizontal: 10\n  },\n  Imagem: {\n    width: 430,\n    height: 490,\n    resizeMode: 'center',\n    borderRadius: 100\n  }\n});","map":{"version":3,"sources":["C:/Users/tersa/Documents/Projetos/fala-einstein/App.js"],"names":["Magnetometer","React","Compass","useState","x","y","z","data","setData","subscription","setSubscription","useEffect","_toggle","_unsubscribe","_subscribe","_slow","setUpdateInterval","_fast","addListener","result","remove","styles","sensor","Imagem","require","round","buttonContainer","button","middleButton","n","Math","floor","StyleSheet","create","container","flex","flexDirection","alignItems","marginTop","justifyContent","backgroundColor","padding","borderLeftWidth","borderRightWidth","borderColor","paddingHorizontal","width","height","resizeMode","borderRadius"],"mappings":"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","sourcesContent":["/*// cSpell:ignore Botao\nimport React from 'react'\nimport { SafeAreaView, Text, StyleSheet, Image } from 'react-native'\nimport { FontAwesome } from '@expo/vector-icons'\nimport * as Speech from 'expo-speech'\n\nexport default function App() {\n\n  let frases = [\n    \"A imaginação é mais importante que o conhecimento.\",\n    \"A liberação da energia atômica mudou tudo, menos nossa maneira de pensar.\",\n    \"O mundo não está ameaçado pelas pessoas más, e sim por aquelas que permitem a maldade.\",\n    \"O nacionalismo é uma doença infantil; é o sarampo da humanidade.\",\n    \"Os ideais que iluminaram o meu caminho são a bondade, a beleza e a verdade.\",\n    \"Nenhum cientista pensa com fórmulas.\",\n    \"Tudo deveria se tornar o mais simples possível,mas não simplificado.\",\n    \"Quero conhecer os pensamentos de Deus... O resto é detalhe.\",\n    \"Duas coisas são infinitas: o universo e a estupidez humana. Mas, em relação ao universo, ainda não tenho certeza absoluta.\"\n  ]\n\n  function falar() {\n    var frase = frases[parseInt(Math.random() * frases.length)]\n    Speech.speak(frase, { language: 'pt' })\n  }\n\n  function parar(){\n    Speech.stop()\n  }\n\n  return (\n    <SafeAreaView\n      style={styles.Principal}>\n      <Text\n        style={styles.Titulo}>\n        <FontAwesome\n          name='comment' size={30} />\n        {\" \"}Fala Einstein!\n        </Text>\n\n      <Image\n        style={styles.Imagem}\n        source={require('./assets/einstein.png')} />\n\n      <FontAwesome.Button\n        name='volume-up'\n        backgroundColor='#0275d8'\n        style={styles.Botao}\n        onPress={falar}>\n        Ouvir a frase\n        </FontAwesome.Button>\n        \n        <FontAwesome.Button\n        name='stop-circle'\n        backgroundColor='#d9534f'\n        style={styles.Botao}\n        onPress={parar}>\n        Parar frase\n        </FontAwesome.Button>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  Principal: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  Titulo: {\n    fontSize: 30,\n    color: \"#1a237e\", /* azul indigo \n  },\n  Imagem: {\n    height: 500,\n    resizeMode: 'center'\n  },\n  Botao: {\n    height: 50,\n    borderRadius: 50\n  }\n})*/\nimport { Magnetometer } from 'expo-sensors';\nimport React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View, Image } from 'react-native';\n\nexport default function Compass() {\n  const [data, setData] = React.useState({\n    x: 0,\n    y: 0,\n    z: 0,\n  });\n  const [subscription, setSubscription] = React.useState(null);\n\n  React.useEffect(() => {\n    _toggle();\n    return () => {\n      _unsubscribe();\n    };\n  }, []);\n\n  const _toggle = () => {\n    if (subscription) {\n      _unsubscribe();\n    } else {\n      _subscribe();\n    }\n  };\n\n  const _slow = () => {\n    Magnetometer.setUpdateInterval(1000);\n  };\n\n  const _fast = () => {\n    Magnetometer.setUpdateInterval(16);\n  };\n\n  const _subscribe = () => {\n    setSubscription(\n      Magnetometer.addListener(result => {\n        setData(result);\n      })\n    );\n  };\n\n  const _unsubscribe = () => {\n    subscription && subscription.remove();\n    setSubscription(null);\n  };\n\n  const { x, y, z } = data;\n  return (\n    <View style={styles.sensor}>\n       <Image\n        style={styles.Imagem}\n        source={require('./assets/Magneto.png')} />\n      <Text>Magnetômetro:</Text>\n      <Text>\n        x: {round(x)} y: {round(y)} z: {round(z)}\n      </Text>\n\n      <View style={styles.buttonContainer}>\n        <TouchableOpacity onPress={_toggle} style={styles.button}>\n          <Text>Alternar</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_slow} style={[styles.button, styles.middleButton]}>\n          <Text>Devagar</Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={_fast} style={styles.button}>\n          <Text>Rápido</Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction round(n) {\n  if (!n) {\n    return 0;\n  }\n  return Math.floor(n * 100) / 100;\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    alignItems: 'stretch',\n    marginTop: 15,\n  },\n  button: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#eee',\n    padding: 10,\n  },\n  middleButton: {\n    borderLeftWidth: 1,\n    borderRightWidth: 1,\n    borderColor: '#ccc',\n  },\n  sensor: {\n    marginTop: 15,\n    paddingHorizontal: 10,\n  },\n  Imagem: {\n    width: 430,\n    height: 490,\n    resizeMode: 'center',\n    borderRadius: 100\n  }\n});\n\n"]},"metadata":{},"sourceType":"module"}